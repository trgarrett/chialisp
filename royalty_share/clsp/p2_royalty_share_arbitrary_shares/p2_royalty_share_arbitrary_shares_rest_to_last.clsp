; This puzzle is designed to split its coin amount according to a predefined payout scheme.

(mod
  (
  PAYOUT_SCHEME ; The payout scheme is a list of recipient puzzle hashes and their share, e.g.
                ; ((0xcafef00d 80) (0xdeadbeef 20)) for an 80/20 split
  my_amount ; The amount of the coin to be split.
  total_shares ; The sum of all shares in the payout scheme. Passed in to reduce the complexity of the puzzle.
  )

  (include condition_codes.clib)
  (include curry_and_treehash.clib)

  (defun-inline get_puzhash (payout_scheme_item)
    (f payout_scheme_item)
  )

  (defun-inline get_share (payout_scheme_item)
    (f (r payout_scheme_item))
  )

  (defun-inline calculate_share (total_amount share total_shares)
    (f (divmod (* total_amount share) total_shares))
  )

  (defun-inline get_amount (payout_scheme_item total_amount total_shares)
    (calculate_share total_amount (get_share payout_scheme_item) total_shares)
  )

  ; mutual recursive function to calculate the amount only once
  (defun calculate_amount_and_split (PAYOUT_SCHEME total_amount total_shares shares_sum remaining_amount)
    (if PAYOUT_SCHEME
      (split_amount_and_create_coins PAYOUT_SCHEME (get_amount (f PAYOUT_SCHEME) total_amount total_shares) total_amount total_shares shares_sum remaining_amount)
      (if (= total_shares shares_sum)
        ()
        (x) ; raise if total shares input doesn't match the sum of all shares
      )
    )
  )

   ; Loop through the royalty payout scheme and create coins
  (defun split_amount_and_create_coins (PAYOUT_SCHEME this_amount total_amount total_shares shares_sum remaining_amount)
    (c
      (list
        CREATE_COIN
        (get_puzhash (f PAYOUT_SCHEME))
        (if (r PAYOUT_SCHEME) this_amount remaining_amount)
        (list (get_puzhash (f PAYOUT_SCHEME)))
      )
      (calculate_amount_and_split
        (r PAYOUT_SCHEME)
        total_amount
        total_shares
        (+ shares_sum (get_share (f PAYOUT_SCHEME)))
        (- remaining_amount this_amount)
      )
    )
  )

  ; main
  (c
    (list CREATE_COIN_ANNOUNCEMENT ())
    (c
      (list ASSERT_MY_AMOUNT my_amount)
      (calculate_amount_and_split PAYOUT_SCHEME my_amount total_shares 0 my_amount)
    )
  )
)